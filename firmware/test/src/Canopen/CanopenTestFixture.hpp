#include "mock/CanIOMock.hpp"
#include "mock/LoggingMock.hpp"
#include "gmock/gmock.h"
#include "gtest/gtest.h"
#include <CanFestival/CanFestivalLocker.hpp>
#include <CanFestival/CanFestivalTimers.hpp>
#include <PeripheralDrivers/CanIO.hpp>
#include <Statemachine/Canopen.hpp>
#include <Statemachine/StateSources.hpp>
#include <Statemachine/Statemachine.hpp>
#include <cstring>
#include <hippomocks.h>
#include <iostream>
#include <mock/HALMock.hpp>
#include <stm32f3xx_hal.h>
#include <vector>

using namespace remote_control_device;
using ::testing::AnyNumber;
using ::testing::IgnoreResult;
using ::testing::Return;

class CanopenTest : public ::testing::Test
{
protected:
    CanopenTest() : term(halMock), log(term, halMock), canIO(halMock, log), cft(halMock, log)
    {
    }

    void SetUp() override;

    HALMock halMock;
    TerminalIOMock term;
    LoggingMock log;

    CanIOMock canIO;
    CanFestivalTimers cft;

public:
    /**
     * @brief Iterates over list of frames and matches cobIds. Matched frames will be removed from
     * list. All matched frames must have the same data for easier testing.
     *
     * @param frames list of frames
     * @param cobId cobid to match
     * @param target target to write one example message to
     * @return size_t number of matched frames
     */
    static size_t extractFrame(std::vector<Message> &frames, uint16_t cobId, Message &target);

    /**
     * @brief Checks if a can frame has the correct data
     *
     * @param msg
     * @param rtr
     * @param len
     * @param data
     */
    static void ExpectFrameContent(Message &msg, uint8_t rtr, uint8_t len,
                                   std::array<uint8_t, 8> data);

    /**
     * @brief Tests if heartbeat and self state have been published the correct amount of time and
     * with the Correct content
     *
     * @param msgs
     * @param heartbeatState
     * @param selfState
     * @param count
     */
    static void expectSelfState_Hearbeat(std::vector<Message> &msgs, uint8_t heartbeatState,
                                         StateId selfState, int count);

    /**
     * @brief Prints out the tx queue for debugging
     *
     * @param frames
     */
    static void printMsgs(const std::vector<Message> &frames);

    static const uint8_t nodeId = static_cast<uint8_t>(Canopen::BusDevices::RemoteControlDevice);

    static const uint16_t NMTErrorControl_BaseCobId = 0x700;
    static const uint8_t NMTErrorControl_Heartbeat_Bootup = e_nodeState::Initialisation;
    static const uint8_t NMTErrorControl_Heartbeat_Operational = e_nodeState::Operational;
    static const uint8_t NMTErrorControl_Heartbeat_PreOperational = e_nodeState::Pre_operational;

    static const uint16_t NMT_CobId = NMT;
    static const uint8_t NMT_CommandStart = NMT_Start_Node;
    static const uint8_t NMT_CommandPreoperational = NMT_Enter_PreOperational;

    static const uint16_t SDO_Request_BaseCobId = 0x600;
    static const uint16_t SDO_Response_BaseCobId = 0x580;
};