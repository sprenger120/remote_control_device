#include "CanopenTestFixture.hpp"

void CanopenTest::SetUp()
{
    CFLocker::resetOD();
}


void CanopenTest::printMsgs(const std::vector<Message> &frames)
{
    for (int i = 0; i < frames.size(); ++i)
    {
        const Message &e = frames[i];
        std::cout << "[" << i << "] cob_id: 0x" << std::hex << int(e.cob_id);
        std::cout << " data:";

        for (size_t i = 0; i < e.len; ++i)
        {
            std::cout << "0x" << std::hex << int(e.data[i]);
            std::cout << "   ";
        }
        std::cout << "\n";
    }
}

void CanopenTest::expectSelfState_Hearbeat(std::vector<Message> &msgs, uint8_t heartbeatState, StateId selfState,
                              int count)
{
    // this depends on these two things being sent on the same interval
    ASSERT_EQ(Canopen::HeartbeatProducerTime_ms, Canopen::SelfState_TPDOEventTime_ms);

    Message targetMsg = Message_Initializer;

    int framesCnt = extractFrame(msgs, NMTErrorControl_BaseCobId + nodeId, targetMsg);
    if (count > 0)
    {
        EXPECT_GE(framesCnt, count);
        EXPECT_LE(framesCnt, count + 1);
    }
    ExpectFrameContent(targetMsg, NOT_A_REQUEST, 1, {heartbeatState});

    // expected self state published one time
    framesCnt = extractFrame(msgs, Canopen::TPDO1_BaseCobId + nodeId, targetMsg);
    if (count > 0)
    {
        EXPECT_GE(framesCnt, count);
        EXPECT_LE(framesCnt, count + 1);
    }
    ExpectFrameContent(targetMsg, NOT_A_REQUEST, 1, {static_cast<UNS8>(selfState)});
}

void CanopenTest::ExpectFrameContent(Message &msg, uint8_t rtr, uint8_t len,
                                     std::array<uint8_t, 8> data)
{
    ASSERT_LE(len, 8);
    EXPECT_EQ(msg.rtr, rtr);
    EXPECT_EQ(msg.len, len);
    for (int i = 0; i < len; ++i)
    {
        EXPECT_EQ(msg.data[i], data[i]);
    }
}

size_t CanopenTest::extractFrame(std::vector<Message> &frames, uint16_t cobId, Message &target)
{
    std::vector<Message> matchingFrames;
    for (int i = frames.size() - 1; i >= 0; --i)
    {
        if (frames[i].cob_id == cobId)
        {
            matchingFrames.emplace_back(frames[i]);
            frames.erase(frames.begin() + i);
        }
    }

    if (matchingFrames.empty())
    {
        return 0;
    }

    target = matchingFrames[0];

    if (matchingFrames.size() == 1)
    {
        return 1;
    }

    for (int i = 1; i < matchingFrames.size(); ++i)
    {
        if (matchingFrames[i].len != target.len)
        {
            throw std::runtime_error("Frames with same cob_id and different length");
        }
        for (int j = 0; j < target.len; ++j)
        {
            if (matchingFrames[i].data[j] != target.data[j])
            {
                throw std::runtime_error("Frames with same cob_id and different data");
            }
        }
    }

    return matchingFrames.size();
}

TEST_F(CanopenTest, extractFrame)
{
    Message m = Message_Initializer;
    std::vector<Message> msgs;

    // simple multiple frames
    msgs.emplace_back(m);
    msgs.emplace_back(m);
    msgs.emplace_back(m);
    msgs.emplace_back(m);

    EXPECT_EQ(extractFrame(msgs, 0, m), 4);
    EXPECT_EQ(msgs.size(), 0);

    // multiple frames, one to pick
    msgs.emplace_back(m);
    msgs.emplace_back(m);
    msgs.emplace_back(m);
    m.cob_id = 420;
    msgs.emplace_back(m);

    Message msgTarget = Message_Initializer;
    EXPECT_EQ(extractFrame(msgs, 420, msgTarget), 1);
    EXPECT_EQ(msgTarget.cob_id, 420);
    EXPECT_EQ(msgTarget.rtr, 0);
    EXPECT_EQ(msgTarget.len, 0);
    for (auto e : msgTarget.data)
    {
        EXPECT_EQ(e, 0);
    }
    EXPECT_EQ(msgs.size(), 3);
    msgs.clear();

    // no frames, leave msgTarget unchanged
    EXPECT_EQ(extractFrame(msgs, 1337, msgTarget), 0);
    EXPECT_EQ(msgTarget.cob_id, 420);
    EXPECT_EQ(msgTarget.rtr, 0);
    EXPECT_EQ(msgTarget.len, 0);
    for (auto e : msgTarget.data)
    {
        EXPECT_EQ(e, 0);
    }
    EXPECT_EQ(msgs.size(), 0);

    // mismatching data between frames with same cobid
    m.cob_id = 420;
    m.len = 1;
    m.data[0] = 42;
    msgs.emplace_back(m);
    m.data[0] = 69;
    msgs.emplace_back(m);

    try
    {
        extractFrame(msgs, 420, msgTarget);
        FAIL() << "Expected exception";
    }
    catch (...)
    {
    }
    msgs.clear();

    // mismatching length between frames with same cobid
    m.len = 2;
    msgs.emplace_back(m);
    m.len = 1;
    msgs.emplace_back(m);
    try
    {
        extractFrame(msgs, 420, msgTarget);
        FAIL() << "Expected exception";
    }
    catch (...)
    {
    }
}